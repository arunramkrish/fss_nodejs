Day 1 - First half - Modular Javascript, Object Oriented javascript, Functional programming in Javascript
----------------------------------------------------------------------------------------------------------

1. Grammar and Types - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types
Refer to labs/1_javascript.html

2. Control Flow and Error handling - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling

3. Loops and iterations - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration

4. Working with Objects - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects
Refer to labs/2_Object.html

5. Object API - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
Refer to labs/8_objectIteration.js (dealt on Day2) that shows how to iterate through properties in object

6. Object Oriented Javascript - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript

7. Object.prototype - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype

8. Functions https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
Refer to labs/3_function.html

9. Function API - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function

10. Array API - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
Refer to labs/4_arrays.html

11. Inheritance via Prototype - https://developer.mozilla.org/en/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
Refer to labs/5_inheritance.html and labs/5_inheritance.js

Advanced Client side javascript references (Following topics were not covered 
-------------------------------------------
12. Promise - https://github.com/mdn/promises-test/blob/gh-pages/index.html

13. AJAX API - https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started

14. Node, Element, HTMLElement, HTMLTableElement, HTMLTableRowElement - https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell

15. Javascript design patterns - http://addyosmani.com/resources/essentialjsdesignpatterns/book/

16. Webstorage - https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API

17. CORS (Cross Origin Resource Sharing) - https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS

18. JSON Test (to test JSONP) - http://www.jsontest.com/ also http://jsfiddle.net/echo/jsonp/?name=arun&callback=myjsonphandler

Day 1 - Second Half - Introduction to Nodejs, Modules, npm, basic HTTP server running on nodejs
-----------------------------------------------------------------------------------------------

19. Setup Nodejs - v4.4.1 - https://nodejs.org/en/
Sometimes it is essential to have git client on the machine as npm uses git client to download some artifacts
git client - https://github.com/git-for-windows/git/releases/tag/v2.6.3.windows.1

20. Nodejs release versions - https://nodejs.org/en/download/releases/

21. Hello world in nodejs - Refer to article in guides_html/0_AnIntroductionToNode.pdf. Dont look into the setup section which is outdated. The concepts explained after that still holds good.
Also, refer to NPM package repository - https://www.npmjs.com/

19. Understand global variable "module" and "exports" and how to make use of them and uderstanding how require searches for the module and injects dependency. -  https://nodejs.org/api/modules.html, http://wiki.commonjs.org/wiki/CommonJS

Refer to nodejs project "labs/6_node_project" to find out how to create custom module and make these modules collaborate to form building blocks of an enterprise application.


Day 2 - Fist Half - Nodejs error handling, event emiter, debugging
--------------------------------------------------------------------

20. NodeJS Event Loop - How nodejs manages with one single thread for user event code to be handled - 
https://nodejs.org/dist/latest-v4.x/docs/api/events.html
Also refer http://www.tutorialspoint.com/nodejs/nodejs_event_loop.htm
https://nodesource.com/blog/understanding-the-nodejs-event-loop/ => Also saved in guides_html/2_UnderstandingTheNodeEventLoop.pdf
Refer to labs/9_teller_events

21. How important it is to handle errors in NodeJS as any errors if not handled can potentially cause NodeJS to crash. NodeJS predefined errors, conventions used in callbacks to pass source error object as the first parameter.
Error - https://nodejs.org/api/errors.html

22. Debugging NodeJS application from console using NodeJS Debugger API
To debug on specific port
node --debug=7000 app.js
	
23. Understand global variables available in NodeJS , functions - https://nodejs.org/api/globals.html

Day 2 - Second Half - File IO, Streaming API, TCP/IP Socket server and client
---------------------------------------------------------------

24. File API to read asynchronously with callbacks Vs reading synchronously Vs reading as stream
https://nodejs.org/dist/latest-v4.x/docs/api/fs.html

Also read NodeJS tutorials on reading file in nodejs - https://docs.nodejitsu.com/articles/file-system/how-to-read-files-in-nodejs

Refer to labs/91_fileio for each of the ways in which file IO can be done.

25. Understanding Streaming API, using Pipe to move data from any readable stream to any writable stream.
https://nodejs.org/dist/latest-v4.x/docs/api/stream.html

Additionally if you want to understand reading / writing JSON from file in nodejs - https://www.npmjs.com/package/jsonfile

26. Networking API to create TCP/IP server and client -
https://nodejs.org/dist/latest-v4.x/docs/api/net.html
Refer to labs/92_socket

Day 3 - First half - Nodejs - Buffer IO, HTTP client and server
--------------------------------------------------

27. Exchanging binary data using Buffer https://nodejs.org/dist/latest-v4.x/docs/api/buffer.html
Refer to labs/93_bufferio
Also refer to tutorial - https://docs.nodejitsu.com/articles/advanced/buffers/how-to-use-buffers

28. Writing Http Client and HTTP server. Look at client and server API - https://nodejs.org/dist/latest-v4.x/docs/api/http.html
Refer to labs/94_http for handson exercise

Day 3 - Second half - ExpressJS, connecting to MySQL

29. Start with Express JS - http://expressjs.com, Has instructions to initialize expressjs in  web application

30. Understand how to route different URL patters to different modules in the application - http://expressjs.com/en/guide/routing.html
Refer to labs/95_express project for hands-on exercise

31. Create a starter project with all code organized under respective folders using Express Generator - http://expressjs.com/en/starter/generator.html
Refer to labs/96_expressgen for hands-on

32. Connect to MySQL database using mysql module. Refer to manual https://www.npmjs.com/package/mysql
for further details
Refer to labs/95_express  for handson exercise where query is implemented.

Other links (to be used in Day 4 and Day 5)
-----------------------------------------------
	Timer - https://nodejs.org/api/timers.html
	Path - https://nodejs.org/api/path.html

24. Download Mongo db - https://www.mongodb.org
25. Create folders "data/db" in your drive root
26. Execute MONGO_HOME/bin/mongod
27. Execute bin/mongo - MongoDB shell - https://docs.mongodb.org/manual/reference/mongo-shell/
https://docs.mongodb.org/manual/core/read-operations-introduction/

28. Configure mongoose - https://www.npmjs.com/package/mongoose
29. Understand mongoose API - http://mongoosejs.com/docs/queries.html
https://cdnjs.com/libraries/backbone.js/tutorials/nodejs-restify-mongodb-mongoose

30. Nodejs Cluster - https://nodejs.org/api/cluster.html
31. Express JS Session - https://github.com/expressjs/session
32. NodeJs Express JS session store in Redis - http://blog.arisetyo.com/?p=492

Download Docker toolbox
https://www.docker.com/products/docker-toolbox

1. https://docs.docker.com/windows/
2. https://docs.docker.com/windows/step_one/


https://nodejs.org/dist/latest-v4.x/docs/api/modules.html


To connect to MySQL database from NodeJS application - https://www.npmjs.com/package/mysql

